{"version":3,"sources":["../src/repository.js"],"names":["client","transport","findAgentByTag","tag","query","findEndUserByEmailAndAgentTag","email","createAgent","nickname","endUserId","mutate","updateAgent","id","AgentRepository","then","data","EndUser","console","info","Common","now","agents","length","agent","updatedAgent","catch","error","newAgent","endUser"],"mappings":";;;;;;;;AAAA;;AACA;;;;AAEA,IAAMA,SAAS,iBAAU;AACvBC,aAAW,kCAAc,4DAAd;AADY,CAAV,CAAf;;AAIA,IAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,GAAD,EAAS;AAC9B,SAAOH,OAAOI,KAAP,yMAaH,EAAED,QAAF,EAbG,CAAP;AAcD,CAfD;;AAkBA,IAAME,gCAAgC,SAAhCA,6BAAgC,CAACC,KAAD,EAAQH,GAAR,EAAgB;AACpD,SAAOH,OAAOI,KAAP,uLASH,EAAED,QAAF,EAAOG,YAAP,EATG,CAAP;AAUD,CAXD;;AAaA,IAAMC,cAAc,SAAdA,WAAc,CAACJ,GAAD,EAAMK,QAAN,EAAgBC,SAAhB,EAA8B;AAChD,SAAOT,OAAOU,MAAP,6CAEyBP,GAFzB,sBAE6CK,QAF7C,uBAEuEC,SAFvE,0GAAP;AAWD,CAZD;;AAcA,IAAME,cAAc,SAAdA,WAAc,CAACC,EAAD,EAAKJ,QAAL,EAAkB;AACpC,SAAOR,OAAOU,MAAP,+CAE2BE,EAF3B,sBAE8CJ,QAF9C,qEAAP;AAQD,CATD;;IAWqBK,e;;;;;;;2BAEZV,G,EAAKK,Q,EAAUF,K,EAAO;AAC7B,UAAI,CAACA,KAAL,EAAY;AACX;AACA;AACDD,oCAA8BC,KAA9B,EAAqCH,GAArC,EAA0CW,IAA1C,CAA+C,UAACC,IAAD,EAAU;AACxD,YAAI,CAACA,KAAKC,OAAV,EAAmB;AAClB,iBAAOC,QAAQC,IAAR,CAAaC,OAAOC,GAAP,EAAb,uBAA8Cd,KAA9C,CAAP;AACA,SAFD,MAEO;AACN,cAAMG,YAAYM,KAAKC,OAAL,CAAaJ,EAA/B;AACA,cAAIG,KAAKC,OAAL,CAAaK,MAAb,CAAoBC,MAApB,GAA6B,CAAjC,EAAoC;AACnC,gBAAMC,QAAQR,KAAKC,OAAL,CAAaK,MAAb,CAAoB,CAApB,CAAd;AACA,gBAAIE,MAAMf,QAAN,KAAmBA,QAAvB,EAAiC;AAChCG,0BAAYY,MAAMX,EAAlB,EAAsBJ,QAAtB,EAAgCM,IAAhC,CAAqC,UAACC,IAAD,EAAU;AAC9CE,wBAAQC,IAAR,CAAaC,OAAOC,GAAP,EAAb,6BAAiDL,KAAKS,YAAL,CAAkBhB,QAAnE,UAAgFF,KAAhF;AACA,eAFD,EAEGmB,KAFH,CAES,UAACC,KAAD,EAAW;AACnBT,wBAAQS,KAAR,CAAiBP,OAAOC,GAAP,EAAjB,mBAA6CM,KAA7C;AACA,eAJD;AAKA;AACD,WATD,MASO;AACNnB,wBAAYJ,GAAZ,EAAiBK,QAAjB,EAA2BC,SAA3B,EAAsCK,IAAtC,CAA2C,UAACC,IAAD,EAAU;AACpDE,sBAAQC,IAAR,CAAaC,OAAOC,GAAP,EAAb,qBAA4CL,KAAKY,QAAL,CAAcnB,QAA1D,0BAAiFO,KAAKY,QAAL,CAAcC,OAAd,CAAsBtB,KAAvG;AACA,aAFD,EAEGmB,KAFH,CAES,UAACC,KAAD,EAAW;AACnBT,sBAAQS,KAAR,CAAiBP,OAAOC,GAAP,EAAjB,mBAA6CM,KAA7C;AACA,aAJD;AAKA;AACD;AACD,OAtBD,EAsBGD,KAtBH,CAsBS,UAACC,KAAD,EAAW;AACnBT,gBAAQS,KAAR,CAAiBP,OAAOC,GAAP,EAAjB,qCAA+DM,KAA/D;AACA,OAxBD;AAyBA;;;;;;kBA/BmBb,e","file":"repository.js","sourcesContent":["import { Lokka } from 'lokka'\nimport { Transport } from 'lokka-transport-http'\n\nconst client = new Lokka({\n  transport: new Transport('https://api.graph.cool/simple/v1/cixri1w220iji0121r8lr0n69')\n})\n\nconst findAgentByTag = (tag) => {  \n  return client.query(`\n  query findAgentByTag($tag: String!) {\n    Agent(tag: $tag) { \n      id\n      tag\n      nickname\n      endUser {\n        email\n      }\n    }\n    User(tag: $tag) {\n      id\n    }\n  }`, { tag })\n}\n\n\nconst findEndUserByEmailAndAgentTag = (email, tag) => {  \n  return client.query(`\n  query ($email: String!, $tag: String!) {\n    EndUser(email: $email) {\n      id\n      agents(filter: {tag: $tag}) {\n        id\n        nickname      \n      }\n    }\n  }`, { tag, email })\n}\n\nconst createAgent = (tag, nickname, endUserId) => {\n  return client.mutate(`\n  {\n    newAgent: createAgent(tag: \"${tag}\", nickname: \"${nickname}\", endUserId: \"${endUserId}\") {\n      id\n      updatedAt\n      nickname\n      endUser {\n        email\n      }\n    }\n  }`)\n}\n\nconst updateAgent = (id, nickname) => {\n  return client.mutate(`\n  {\n   updatedAgent: updateAgent(id: \"${id}\", nickname: \"${nickname}\") {\n      id\n      updatedAt    \n      nickname\n    }\n  }`)\n}\n\nexport default class AgentRepository {\n  \n  update(tag, nickname, email) {\n\t\tif (!email) {\n\t\t\treturn\n\t\t}\n\t\tfindEndUserByEmailAndAgentTag(email, tag).then((data) => {\n\t\t\tif (!data.EndUser) {\n\t\t\t\treturn console.info(Common.now(), `Email inconnu : ${email}`)\n\t\t\t} else {\n\t\t\t\tconst endUserId = data.EndUser.id\n\t\t\t\tif (data.EndUser.agents.length > 0) {\n\t\t\t\t\tconst agent = data.EndUser.agents[0]\n\t\t\t\t\tif (agent.nickname !== nickname) {\n\t\t\t\t\t\tupdateAgent(agent.id, nickname).then((data) => {\n\t\t\t\t\t\t\tconsole.info(Common.now(), `Agent mis à jour : ${data.updatedAgent.nickname}, ${email}`)\n\t\t\t\t\t\t}).catch((error) => {\n\t\t\t\t\t\t\tconsole.error(`${Common.now()} updateAgent`, error)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcreateAgent(tag, nickname, endUserId).then((data) => {\n\t\t\t\t\t\tconsole.info(Common.now(), `Nouvel agent \"${data.newAgent.nickname}\" créé pour ${data.newAgent.endUser.email}`)\n\t\t\t\t\t}).catch((error) => {\n\t\t\t\t\t\tconsole.error(`${Common.now()} createAgent`, error)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}).catch((error) => {\n\t\t\tconsole.error(`${Common.now()} findEndUserByEmailAndAgentTag`, error)\n\t\t})\n\t}  \n  \n}"]}